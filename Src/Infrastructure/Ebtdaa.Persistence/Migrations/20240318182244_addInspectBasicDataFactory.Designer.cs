// <auto-generated />
using System;
using Ebtdaa.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ebtdaa.Persistence.Migrations
{
    [DbContext(typeof(EbtdaaDbContext))]
    [Migration("20240318182244_addInspectBasicDataFactory")]
    partial class addInspectBasicDataFactory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActualProduction")
                        .HasColumnType("int");

                    b.Property<int?>("ActualProductionUintId")
                        .HasColumnType("int");

                    b.Property<int?>("ActualProductionWeight")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("DesignedCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("DesignedCapacityUnitId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryProductId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ActualProductionUintId");

                    b.HasIndex("DesignedCapacityUnitId");

                    b.HasIndex("FactoryProductId");

                    b.ToTable("ActualProductionAndCapacities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryId");

                    b.ToTable("ActualProductionAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.IncreaseActualProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("ReasonId");

                    b.ToTable("IncreaseActualProductions");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualRawMaterials.Entity.ActualRawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("CurrentStockQuantity")
                        .HasColumnType("float");

                    b.Property<double>("CurrentStockQuantity_KG")
                        .HasColumnType("float");

                    b.Property<double>("IncreasedUsageReason")
                        .HasColumnType("float");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("StockUnitId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UsageUnitId")
                        .HasColumnType("int");

                    b.Property<double>("UsedQuantity")
                        .HasColumnType("float");

                    b.Property<double>("UsedQuantity_KG")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("ActualRawMaterials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualRawMaterials.Entity.ActualRawMaterialFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryId");

                    b.ToTable("ActualRawMaterialFiles");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveProductsCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CustomsItem10_Id")
                        .HasColumnType("int");

                    b.Property<int>("CustomsItem12_Id")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveProduct")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("ValidtyCustomsClassification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("CustomsItemUpdates");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.BaiscFactoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("BasicFactoryInfos");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InspectorFactoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenseExpirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("InspectorFactoryId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FinanceManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinanceManagerPhoneId")
                        .HasColumnType("int");

                    b.Property<string>("OfficerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficerPhoneId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionManagerPhoneId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("FinanceManagerPhoneId");

                    b.HasIndex("OfficerPhoneId");

                    b.HasIndex("ProductionManagerPhoneId");

                    b.ToTable("FactoryContacts");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FactoryEntities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryFiles");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Assets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("CurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ElectricityExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EmploymentExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("FuelExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NonCurrentAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NonCurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherOperatingExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RawMterialExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Revenues")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("WaterExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryFinancials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancialAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryFinancialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryFinancialId");

                    b.ToTable("FactoryFinancialAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryEntityId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("IndustrialAreaId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FactoryEntityId");

                    b.HasIndex("FactoryId");

                    b.HasIndex("IndustrialAreaId");

                    b.ToTable("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryLocationId");

                    b.ToTable("FactoryLocationAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryMonthlyFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("ElectricityExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EmploymentExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("FuelExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherOperatingExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("RawMterialExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("WaterExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("FactoryMonthlyFinancials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryUpdateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("FactoryUpdateStatuses");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.IndustrialArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("IndustrialAreas");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E164Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityCode")
                        .HasColumnType("int");

                    b.Property<int>("FactoryEntityId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactoryEntityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.MappingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HS6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MappingUnits");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.ReasonIncreasCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReasonIncreasCapacities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Setting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Ebtdaa.Domain.InspectorBasicFactoryInfo.Entity.InspectBasicFactoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FactoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactoryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsFactNameCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFactStatusCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("InspectBasicFactoryInfos");
                });

            modelBuilder.Entity("Ebtdaa.Domain.InspectorRawMaterials.Entity.InspectorRawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsClearImage")
                        .HasColumnType("bit");

                    b.Property<int?>("PaperId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("InspectorRawMaterials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Inspectors.Entity.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Inspectors.Entity.InspectorFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("InspectorId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.ToTable("InspectorFactories");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Periods.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CommericalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PeperId")
                        .HasColumnType("int");

                    b.Property<int?>("PhototId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeperId");

                    b.HasIndex("PhototId");

                    b.HasIndex("ProductId");

                    b.ToTable("FactoryProducts");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.MappingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hs10Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hs10NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hs10NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hs12Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hs12NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hs12NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MappingProducts");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Kilograms_Per_Unit")
                        .HasColumnType("float");

                    b.Property<string>("Level12Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Review")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.ProductPeriodActive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryProductId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryProductId");

                    b.HasIndex("PeriodId");

                    b.ToTable("ProductPeriodActives");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.ProductRawMaterial", b =>
                {
                    b.Property<int>("FactoryProductId")
                        .HasColumnType("int");

                    b.Property<int>("rawMaterialId")
                        .HasColumnType("int");

                    b.HasKey("FactoryProductId", "rawMaterialId");

                    b.HasIndex("rawMaterialId");

                    b.ToTable("ProductRawMaterials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageWeightKG")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CustomItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaximumMonthlyConsumption")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.RawMaterialAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("RawMaterialAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ScreenStatus.Entity.ScreenStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("PeriodId");

                    b.ToTable("ScreenStatuses");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Unit", "ActualProductionUint")
                        .WithMany("ActualProductionUints")
                        .HasForeignKey("ActualProductionUintId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ebtdaa.Domain.General.Unit", "DesignedCapacityUnit")
                        .WithMany("DesignedCapacityUnits")
                        .HasForeignKey("DesignedCapacityUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", "FactoryProduct")
                        .WithMany("ActualProductionAndCapacities")
                        .HasForeignKey("FactoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualProductionUint");

                    b.Navigation("DesignedCapacityUnit");

                    b.Navigation("FactoryProduct");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.IncreaseActualProduction", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("IncreaseActualProductions")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.ActualProduction.Entity.Reason", "Reason")
                        .WithMany("IncreaseActualProductions")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualRawMaterials.Entity.ActualRawMaterial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualRawMaterials.Entity.ActualRawMaterialFile", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("ActualRawMaterialFiles")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.BaiscFactoryInfo", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("BaiscFactoryInfos")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Factory", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Inspectors.Entity.InspectorFactory", null)
                        .WithMany("Factories")
                        .HasForeignKey("InspectorFactoryId");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryContact", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryContacts")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Phone", "FinanceManagerPhone")
                        .WithMany("FinanceManagerPhones")
                        .HasForeignKey("FinanceManagerPhoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Phone", "OfficerPhone")
                        .WithMany("OfficerPhones")
                        .HasForeignKey("OfficerPhoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Phone", "ProductionManagerPhone")
                        .WithMany("ProductionManagerPhones")
                        .HasForeignKey("ProductionManagerPhoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("FinanceManagerPhone");

                    b.Navigation("OfficerPhone");

                    b.Navigation("ProductionManagerPhone");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFile", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryFiles")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryFiles")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryFinancials")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancialAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryFinancialAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", "FactoryFinancial")
                        .WithMany("FactoryFinancialAttachments")
                        .HasForeignKey("FactoryFinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("FactoryFinancial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.City", "City")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryEntity", "FactoryEntity")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("FactoryEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.IndustrialArea", "IndustrialArea")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("IndustrialAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Factory");

                    b.Navigation("FactoryEntity");

                    b.Navigation("IndustrialArea");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocationAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryLocationAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryLocation", "FactoryLocation")
                        .WithMany("FactoryLocationAttachments")
                        .HasForeignKey("FactoryLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("FactoryLocation");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryMonthlyFinancial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryMonthlyFinancials")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany("FactoryMonthlyFinancials")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryUpdateStatus", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.IndustrialArea", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.City", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryEntity", "FactoryEntity")
                        .WithMany()
                        .HasForeignKey("FactoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactoryEntity");
                });

            modelBuilder.Entity("Ebtdaa.Domain.InspectorBasicFactoryInfo.Entity.InspectBasicFactoryInfo", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("InspectorBasicFactoryInfos")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.InspectorRawMaterials.Entity.InspectorRawMaterial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Inspectors.Entity.InspectorFactory", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Inspectors.Entity.Inspector", "Inspector")
                        .WithMany("InspectorFactories")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryProducts")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Peper")
                        .WithMany("Perpers")
                        .HasForeignKey("PeperId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Photot")
                        .WithMany("Photos")
                        .HasForeignKey("PhototId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.Product", "Product")
                        .WithMany("FactoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Peper");

                    b.Navigation("Photot");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", null)
                        .WithMany("Products")
                        .HasForeignKey("FactoryId");

                    b.HasOne("Ebtdaa.Domain.General.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.ProductPeriodActive", b =>
                {
                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", "FactoryProduct")
                        .WithMany("ProductPeriodActives")
                        .HasForeignKey("FactoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany("ProductPeriodActives")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactoryProduct");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.ProductRawMaterial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", "FactoryProduct")
                        .WithMany("ProductRawMaterials")
                        .HasForeignKey("FactoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", "RawMaterial")
                        .WithMany("ProductRawMaterials")
                        .HasForeignKey("rawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactoryProduct");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.General.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.RawMaterialAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ScreenStatus.Entity.ScreenStatus", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Periods.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.Navigation("Factory");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.Reason", b =>
                {
                    b.Navigation("IncreaseActualProductions");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Factory", b =>
                {
                    b.Navigation("BaiscFactoryInfos");

                    b.Navigation("FactoryContacts");

                    b.Navigation("FactoryFiles");

                    b.Navigation("FactoryFinancials");

                    b.Navigation("FactoryLocations");

                    b.Navigation("FactoryMonthlyFinancials");

                    b.Navigation("FactoryProducts");

                    b.Navigation("IncreaseActualProductions");

                    b.Navigation("InspectorBasicFactoryInfos");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryEntity", b =>
                {
                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.Navigation("FactoryFinancialAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.Navigation("FactoryLocationAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.IndustrialArea", b =>
                {
                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Phone", b =>
                {
                    b.Navigation("FinanceManagerPhones");

                    b.Navigation("OfficerPhones");

                    b.Navigation("ProductionManagerPhones");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Attachment", b =>
                {
                    b.Navigation("ActualRawMaterialFiles");

                    b.Navigation("FactoryFiles");

                    b.Navigation("FactoryFinancialAttachments");

                    b.Navigation("FactoryLocationAttachments");

                    b.Navigation("Perpers");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.City", b =>
                {
                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Unit", b =>
                {
                    b.Navigation("ActualProductionUints");

                    b.Navigation("DesignedCapacityUnits");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Inspectors.Entity.Inspector", b =>
                {
                    b.Navigation("InspectorFactories");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Inspectors.Entity.InspectorFactory", b =>
                {
                    b.Navigation("Factories");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Periods.Period", b =>
                {
                    b.Navigation("FactoryMonthlyFinancials");

                    b.Navigation("ProductPeriodActives");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.FactoryProduct", b =>
                {
                    b.Navigation("ActualProductionAndCapacities");

                    b.Navigation("ProductPeriodActives");

                    b.Navigation("ProductRawMaterials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.Navigation("FactoryProducts");
                });

            modelBuilder.Entity("Ebtdaa.Domain.RawMaterials.Entity.RawMaterial", b =>
                {
                    b.Navigation("ProductRawMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
