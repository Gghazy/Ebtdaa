// <auto-generated />
using System;
using Ebtdaa.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ebtdaa.Persistence.Migrations
{
    [DbContext(typeof(EbtdaaDbContext))]
    [Migration("20240110010825_Update_Product_Table")]
    partial class Update_Product_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActualProduction")
                        .HasColumnType("int");

                    b.Property<int>("ActualProductionUintId")
                        .HasColumnType("int");

                    b.Property<int>("ActualProductionWeight")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CustomItemId_12")
                        .HasColumnType("int");

                    b.Property<int>("DesignedCapacity")
                        .HasColumnType("int");

                    b.Property<int>("DesignedCapacityUnitId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ReasoneForIncreaseCapacity")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("ActualProductionAndCapacities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItem.CustomsItemLevel.Entity.CustomsItemLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CustomsItemUpdateId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomsItemUpdateId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomsItemLevels");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveProductsCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CustomsItem10_Id")
                        .HasColumnType("int");

                    b.Property<int>("CustomsItem12_Id")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveProduct")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("ValidtyCustomsClassification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("CustomsItemUpdates");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactoryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LicenseExpirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FinanceManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinanceManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryContacts");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FactoryEntities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryFiles");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Assets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("CurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ElectricityExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EmploymentExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("FuelExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NonCurrentAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NonCurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherOperatingExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RawMterialExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Revenues")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("WaterExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryFinancials");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancialAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryFinancialId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryFinancialId");

                    b.ToTable("FactoryFinancialAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryEntityId")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("IndustrialAreaId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FactoryEntityId");

                    b.HasIndex("FactoryId");

                    b.HasIndex("IndustrialAreaId");

                    b.ToTable("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FactoryLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FactoryLocationId");

                    b.ToTable("FactoryLocationAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.IndustrialArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndustrialAreas");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.ReasonIncreasCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActualProductionAndCapacityId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActualProductionAndCapacityId");

                    b.ToTable("ReasonIncreasCapacities");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActualProductionAndCapacityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualProductionAndCapacityId");

                    b.HasIndex("ProductId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommericalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("CustomItemId_12")
                        .HasColumnType("int");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("WiegthInKgm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItem.CustomsItemLevel.Entity.CustomsItemLevel", b =>
                {
                    b.HasOne("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", null)
                        .WithMany("CustomsItemLevels")
                        .HasForeignKey("CustomsItemUpdateId");

                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.Product", null)
                        .WithMany("CustomsItems")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryContact", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryContacts")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFile", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryFiles")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryFiles")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryFinancials")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancialAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryFinancialAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", "FactoryFinancial")
                        .WithMany("FactoryFinancialAttachments")
                        .HasForeignKey("FactoryFinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("FactoryFinancial");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.City", "City")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryEntity", "FactoryEntity")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("FactoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany("FactoryLocations")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.IndustrialArea", "IndustrialArea")
                        .WithMany()
                        .HasForeignKey("IndustrialAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Factory");

                    b.Navigation("FactoryEntity");

                    b.Navigation("IndustrialArea");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocationAttachment", b =>
                {
                    b.HasOne("Ebtdaa.Domain.General.Attachment", "Attachment")
                        .WithMany("FactoryLocationAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebtdaa.Domain.Factories.Entity.FactoryLocation", "FactoryLocation")
                        .WithMany("FactoryLocationAttachments")
                        .HasForeignKey("FactoryLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("FactoryLocation");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.ReasonIncreasCapacity", b =>
                {
                    b.HasOne("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", null)
                        .WithMany("Reasones")
                        .HasForeignKey("ActualProductionAndCapacityId");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Unit", b =>
                {
                    b.HasOne("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", null)
                        .WithMany("Units")
                        .HasForeignKey("ActualProductionAndCapacityId");

                    b.HasOne("Ebtdaa.Domain.ProductData.Entity.Product", null)
                        .WithMany("Units")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.HasOne("Ebtdaa.Domain.Factories.Entity.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ActualProduction.Entity.ActualProductionAndCapacity", b =>
                {
                    b.Navigation("Reasones");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Ebtdaa.Domain.CustomsItemUpdateData.Entity.CustomsItemUpdate", b =>
                {
                    b.Navigation("CustomsItemLevels");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.Factory", b =>
                {
                    b.Navigation("FactoryContacts");

                    b.Navigation("FactoryFiles");

                    b.Navigation("FactoryFinancials");

                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryEntity", b =>
                {
                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryFinancial", b =>
                {
                    b.Navigation("FactoryFinancialAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.Factories.Entity.FactoryLocation", b =>
                {
                    b.Navigation("FactoryLocationAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.Attachment", b =>
                {
                    b.Navigation("FactoryFiles");

                    b.Navigation("FactoryFinancialAttachments");

                    b.Navigation("FactoryLocationAttachments");
                });

            modelBuilder.Entity("Ebtdaa.Domain.General.City", b =>
                {
                    b.Navigation("FactoryLocations");
                });

            modelBuilder.Entity("Ebtdaa.Domain.ProductData.Entity.Product", b =>
                {
                    b.Navigation("CustomsItems");

                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
